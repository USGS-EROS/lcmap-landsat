(ns lcmap.aardvark.system
  "Define components and function for building a system"
  (:require [com.stuartsierra.component :as component]
            [ring.component.jetty :refer [jetty-server]]
            [clojure.tools.logging :as log]
            [qbits.alia :as alia]
            [langohr.core :as rmq]
            [lcmap.aardvark.app :as app]))

;;;

(defrecord Database [config]
  component/Lifecycle
  (start [context]
    (log/info "starting db component ...")
    (->> (:database config)
         (apply alia/cluster)
         (assoc context :cluster)))
  (stop [context]
    (log/info "stopping db component ...")
    (alia/shutdown (:cluster context))
    (assoc context :cluster nil)))

(defn new-database [config]
  (map->Database {:config config}))


(defrecord DatabaseSession [database]
  component/Lifecycle
  (start [context]
    (log/info "starting db session component ...")
    (assoc context :db-session (alia/connect (:db context))))
  (stop [context]
    (log/info "stopping db session component ...")
    (alia/shutdown (:db-session context))
    (assoc context :db-session nil)))

(defn new-database-session [database]
  (map->DatabaseSession {:db database}))

(defrecord Graph [database]
  component/Lifecycle
  (start [context]
    (log/info "starting graph component")
    (assoc context :graph nil))
  (stop [context]
    (log/info "stopping graph component")
    (assoc context :graph nil)))

;;;

(defrecord Event [config]
  component/Lifecycle
  (start [context]
    (log/info "starting event component ...")
    (->> (:event config)
         (rmq/connect)
         (assoc context :connection)))
  (stop [context]
    (log/info "stopping event component ...")
    (rmq/close (:connection context))
    (assoc context :connection nil)))

(defn new-event [config]
  (->Event config))

;;;

(defrecord App [config db msg]
  component/Lifecycle
  (start [context]
    (log/info "starting app component ...")
    (assoc context :handler (app/new-handler db msg)))
  (stop [context]
    (log/info "stopping app component ...")
    (assoc context :handler nil)))

(defn new-app [config]
  ;; Base constructor for App
  ;; Do not pass in components, they will be injected
  (map->App {:config config}))


;;;

(defn system [cfg]
  (component/system-map
   :db   (new-database cfg)
   :msg  (new-event cfg)
   :app  (component/using (new-app cfg) [:db :msg])
   :http (component/using (jetty-server (:http cfg)) [:app])))
